(function () {
    'use strict';

    const width = 800;
    const height = 400;
    const radius = Math.min(width, height) / 2;

    const svg = d3.select("#chart-area")
        .append("svg")
            .attr("width", width)
            .attr("height", height)
        .append("g")
            .attr("transform", `translate(${width / 2 - 100}, ${height / 2})`);

    const color = d3.scaleOrdinal(["#66c2a5","#fc8d62","#8da0cb", "#e78ac3","#a6d854","#ffd92f"]);

    const pie = d3.pie()
        .value(d => d.count)
        .sort(null);

    const arc = d3.arc()
        .innerRadius(radius - 100)
        .outerRadius(radius);

    const type = d => {
        d.C = d['Critical Bed'];
        d.M = d['Med/Surg Bed'];
        return d;
    };

    function arcTween(a) {
        const i = d3.interpolate(this._current, a);
        this._current = i(1);
        return (t) => arc(i(t));
    }

    d3.json("data.json", type).then(data => {
        d3.selectAll("input")
            .on("change", update);

        function update(val = this.value) {
          	svg.selectAll('circle').remove();
          	svg.selectAll('text').remove();
          	
          	const region = data[val].map(val => val.region);
          	// Add one dot in the legend for each name.
            svg.selectAll("dots")
              .data(region)
              .enter()
              .append("circle")
                .attr("cx", 310)
                .attr("cy", (d,i) => -90 + i*45) // -90 is where the first dot appears. 45 is the distance between dots
                .attr("r", 18)
                .style("fill", (d, i) => color(i));

            // Add one dot in the legend for each name.
            svg.selectAll("labels")
              .data(region)
              .enter()
              .append("text")
                .attr("x", 330)
                .attr("y", (d,i) => -88 + i*45) // -88 is where the first dot appears. 45 is the distance between dots
                .style("fill", (d, i) => color(i))
                .text((d) => d)
                .attr("text-anchor", "left")
          			.style("font-size", "18px")
                .style("alignment-baseline", "middle");
          
          
            // Join new data
            const path = svg.selectAll("path")
                .data(pie(data[val]));

            // Update existing arcs
            path.transition().duration(200).attrTween("d", arcTween);
          
          	setTimeout(() => path.transition().attrTween("d", arcTween(4)), 2000);

            // Enter new arcs
            path.enter().append("path")
                .attr("fill", (d, i) => color(i))
                .attr("d", arc)
                .attr("stroke", "white")
                .attr("stroke-width", "10px")
                .each(function(d) { this._current = d; });
        }

        update("Critical Bed");
    });

}());

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHdpZHRoID0gODAwO1xuY29uc3QgaGVpZ2h0ID0gNDAwO1xuY29uc3QgcmFkaXVzID0gTWF0aC5taW4od2lkdGgsIGhlaWdodCkgLyAyO1xuXG5jb25zdCBzdmcgPSBkMy5zZWxlY3QoXCIjY2hhcnQtYXJlYVwiKVxuICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGB0cmFuc2xhdGUoJHt3aWR0aCAvIDIgLSAxMDB9LCAke2hlaWdodCAvIDJ9KWApO1xuXG5jb25zdCBjb2xvciA9IGQzLnNjYWxlT3JkaW5hbChbXCIjNjZjMmE1XCIsXCIjZmM4ZDYyXCIsXCIjOGRhMGNiXCIsIFwiI2U3OGFjM1wiLFwiI2E2ZDg1NFwiLFwiI2ZmZDkyZlwiXSk7XG5cbmNvbnN0IHBpZSA9IGQzLnBpZSgpXG4gICAgLnZhbHVlKGQgPT4gZC5jb3VudClcbiAgICAuc29ydChudWxsKTtcblxuY29uc3QgYXJjID0gZDMuYXJjKClcbiAgICAuaW5uZXJSYWRpdXMocmFkaXVzIC0gMTAwKVxuICAgIC5vdXRlclJhZGl1cyhyYWRpdXMpO1xuXG5jb25zdCB0eXBlID0gZCA9PiB7XG4gICAgZC5DID0gZFsnQ3JpdGljYWwgQmVkJ107XG4gICAgZC5NID0gZFsnTWVkL1N1cmcgQmVkJ107XG4gICAgcmV0dXJuIGQ7XG59XG5cbmZ1bmN0aW9uIGFyY1R3ZWVuKGEpIHtcbiAgICBjb25zdCBpID0gZDMuaW50ZXJwb2xhdGUodGhpcy5fY3VycmVudCwgYSk7XG4gICAgdGhpcy5fY3VycmVudCA9IGkoMSk7XG4gICAgcmV0dXJuICh0KSA9PiBhcmMoaSh0KSk7XG59XG5cbmQzLmpzb24oXCJkYXRhLmpzb25cIiwgdHlwZSkudGhlbihkYXRhID0+IHtcbiAgICBkMy5zZWxlY3RBbGwoXCJpbnB1dFwiKVxuICAgICAgICAub24oXCJjaGFuZ2VcIiwgdXBkYXRlKTtcblxuICAgIGZ1bmN0aW9uIHVwZGF0ZSh2YWwgPSB0aGlzLnZhbHVlKSB7XG4gICAgICBcdHN2Zy5zZWxlY3RBbGwoJ2NpcmNsZScpLnJlbW92ZSgpO1xuICAgICAgXHRzdmcuc2VsZWN0QWxsKCd0ZXh0JykucmVtb3ZlKCk7XG4gICAgICBcdFxuICAgICAgXHRjb25zdCByZWdpb24gPSBkYXRhW3ZhbF0ubWFwKHZhbCA9PiB2YWwucmVnaW9uKTtcbiAgICAgIFx0Ly8gQWRkIG9uZSBkb3QgaW4gdGhlIGxlZ2VuZCBmb3IgZWFjaCBuYW1lLlxuICAgICAgICBzdmcuc2VsZWN0QWxsKFwiZG90c1wiKVxuICAgICAgICAgIC5kYXRhKHJlZ2lvbilcbiAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgIC5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgICAgICAgIC5hdHRyKFwiY3hcIiwgMzEwKVxuICAgICAgICAgICAgLmF0dHIoXCJjeVwiLCAoZCxpKSA9PiAtOTAgKyBpKjQ1KSAvLyAtOTAgaXMgd2hlcmUgdGhlIGZpcnN0IGRvdCBhcHBlYXJzLiA0NSBpcyB0aGUgZGlzdGFuY2UgYmV0d2VlbiBkb3RzXG4gICAgICAgICAgICAuYXR0cihcInJcIiwgMTgpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIChkLCBpKSA9PiBjb2xvcihpKSk7XG5cbiAgICAgICAgLy8gQWRkIG9uZSBkb3QgaW4gdGhlIGxlZ2VuZCBmb3IgZWFjaCBuYW1lLlxuICAgICAgICBzdmcuc2VsZWN0QWxsKFwibGFiZWxzXCIpXG4gICAgICAgICAgLmRhdGEocmVnaW9uKVxuICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgIC5hdHRyKFwieFwiLCAzMzApXG4gICAgICAgICAgICAuYXR0cihcInlcIiwgKGQsaSkgPT4gLTg4ICsgaSo0NSkgLy8gLTg4IGlzIHdoZXJlIHRoZSBmaXJzdCBkb3QgYXBwZWFycy4gNDUgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gZG90c1xuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCAoZCwgaSkgPT4gY29sb3IoaSkpXG4gICAgICAgICAgICAudGV4dCgoZCkgPT4gZClcbiAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJsZWZ0XCIpXG4gICAgICBcdFx0XHQuc3R5bGUoXCJmb250LXNpemVcIiwgXCIxOHB4XCIpXG4gICAgICAgICAgICAuc3R5bGUoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIik7XG4gICAgICBcbiAgICAgIFxuICAgICAgICAvLyBKb2luIG5ldyBkYXRhXG4gICAgICAgIGNvbnN0IHBhdGggPSBzdmcuc2VsZWN0QWxsKFwicGF0aFwiKVxuICAgICAgICAgICAgLmRhdGEocGllKGRhdGFbdmFsXSkpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyBhcmNzXG4gICAgICAgIHBhdGgudHJhbnNpdGlvbigpLmR1cmF0aW9uKDIwMCkuYXR0clR3ZWVuKFwiZFwiLCBhcmNUd2Vlbik7XG4gICAgICBcbiAgICAgIFx0c2V0VGltZW91dCgoKSA9PiBwYXRoLnRyYW5zaXRpb24oKS5hdHRyVHdlZW4oXCJkXCIsIGFyY1R3ZWVuKDQpKSwgMjAwMClcblxuICAgICAgICAvLyBFbnRlciBuZXcgYXJjc1xuICAgICAgICBwYXRoLmVudGVyKCkuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJmaWxsXCIsIChkLCBpKSA9PiBjb2xvcihpKSlcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBhcmMpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBcIndoaXRlXCIpXG4gICAgICAgICAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCBcIjEwcHhcIilcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKGQpIHsgdGhpcy5fY3VycmVudCA9IGQ7IH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZShcIkNyaXRpY2FsIEJlZFwiKTtcbn0pOyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7SUFBQSxNQUFNLEtBQUssR0FBRyxHQUFHLENBQUM7SUFDbEIsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBQ25CLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQztJQUNBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO0lBQ3BDLEtBQUssTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNsQixTQUFTLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDO0lBQzdCLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUM7SUFDL0IsS0FBSyxNQUFNLENBQUMsR0FBRyxDQUFDO0lBQ2hCLFNBQVMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLFVBQVUsRUFBRSxLQUFLLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNFO0lBQ0EsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM5RjtJQUNBLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUU7SUFDcEIsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDeEIsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDaEI7SUFDQSxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFO0lBQ3BCLEtBQUssV0FBVyxDQUFDLE1BQU0sR0FB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